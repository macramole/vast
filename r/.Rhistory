tiempos = discretize( tiempos, method = "interval", categories = 3)
tiempos = as.numeric(tiempos)
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "color"] = tiempos
}
df.filtered
tiempos
?rep
for ( p in 1:nrow(df.pares) ) {
tiempos = df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "diferenciaTiempo"]
if ( length(tiempos) > 5 ) {
tiempos = discretize( tiempos, method = "interval", categories = 3)
tiempos = as.numeric(tiempos)
} else {
tiempos = rep(1, length(tiempos))
}
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "color"] = tiempos
}
df.filtered
df.filtered.aggr = sqldf("SELECT source, target, color, SUM(value) as value FROM `df.filtered` GROUP BY source, target, color")
df.filtered.aggr
for ( p in 1:nrow(df.pares) ) {
tiempos = df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "diferenciaTiempo"]
if ( length(tiempos) > 5 ) {
tiempos = discretize( tiempos, method = "interval", categories = 3)
# tiempos = as.numeric(tiempos)
} else {
tiempos = rep(1, length(tiempos))
}
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "color"] = as.numeric(tiempos)
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "tiempoDiscret"] = tiempos
}
warnings()
df.filtered
for ( p in 1:nrow(df.pares) ) {
tiempos = df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "diferenciaTiempo"]
if ( length(tiempos) > 5 ) {
tiempos = discretize( tiempos, method = "interval", categories = 3)
# tiempos = as.numeric(tiempos)
} else {
tiempos = rep(1, length(tiempos))
}
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "color"] = as.numeric(tiempos)
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "tiempoDiscret"] = as.character(tiempos)
}
df.filtered
str(df.filtered)
df.filtered$tiempoDiscret = NULL
for ( p in 1:nrow(df.pares) ) {
tiempos = df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "diferenciaTiempo"]
if ( length(tiempos) > 5 ) {
tiempos = discretize( tiempos, method = "interval", categories = 3)
# tiempos = as.numeric(tiempos)
} else {
tiempos = rep(1, length(tiempos))
}
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "color"] = as.numeric(tiempos)
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "tiempoDiscret"] = as.character(tiempos)
}
df.filtered
df.filtered$tiempoDiscret = NULL
for ( p in 1:nrow(df.pares) ) {
tiempos = df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "diferenciaTiempo"]
colores = c()
if ( length(tiempos) > 5 ) {
tiempos = discretize( tiempos, method = "interval", categories = 3)
colores = as.numeric(tiempos)
} else {
colores = rep(1, length(tiempos))
}
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "color"] = colores
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "tiempoDiscret"] = as.character(tiempos)
}
df.filtered
df.filtered.aggr = sqldf("SELECT source, target, color, tiempoDiscret, SUM(value) as value FROM `df.filtered` GROUP BY source, target, color")
df.filtered.aggr
df.filtered.aggr = sqldf("SELECT source, target, color, tiempoDiscret as label, SUM(value) as value FROM `df.filtered` GROUP BY source, target, color")
df.filtered.aggr
entrances = c("entrance0","entrance1","entrance2","entrance3","entrance4")
menosDeUnDia = c( 0, 60*60, 60*60*3, 60*60*6, 60*60*12, 60*60*24 )
# menosDeUnDia = c( 0, 60*60 )
#filtrar por tipo de auto y dia de la semana
for ( i in 2:length(menosDeUnDia) ) {
desde = menosDeUnDia[ i - 1 ]
hasta = menosDeUnDia[ i ]
for ( entrance in entrances ) {
carIDs = sqldf(paste("SELECT
carID,
MAX(targetTime) - MIN(sourceTime) as tiempo
FROM
df
WHERE
carID IN ( SELECT carID FROM df GROUP BY carID HAVING sourceTime = MIN(sourceTime) AND source = '", entrance ,"' )
GROUP BY
carID
HAVING
tiempo BETWEEN ", desde, " AND ", hasta, sep = ""))
df.filtered = df[ df$carID %in% carIDs$carID, ]
df.pares = sqldf("SELECT source, target FROM `df.filtered` GROUP BY source, target")
for ( p in 1:nrow(df.pares) ) {
tiempos = df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "diferenciaTiempo"]
colores = c()
if ( length(tiempos) > 5 ) {
tiempos = discretize( tiempos, method = "interval", categories = 3)
colores = as.numeric(tiempos)
} else {
colores = rep(1, length(tiempos))
}
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "color"] = colores
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "tiempoDiscret"] = as.character(tiempos)
}
df.filtered.aggr = sqldf("SELECT source, target, color, tiempoDiscret as label, SUM(value) as value FROM `df.filtered` GROUP BY source, target, color")
fileName = paste(entrance, "--", desde,"-",hasta, ".csv", sep = "")
write.csv(df.filtered.aggr, file = fileName, row.names = F)
}
}
i = 2
desde = menosDeUnDia[ i - 1 ]
hasta = menosDeUnDia[ i ]
entrance = entrances[1]
carIDs = sqldf(paste("SELECT
carID,
MAX(targetTime) - MIN(sourceTime) as tiempo
FROM
df
WHERE
carID IN ( SELECT carID FROM df GROUP BY carID HAVING sourceTime = MIN(sourceTime) AND source = '", entrance ,"' )
GROUP BY
carID
HAVING
tiempo BETWEEN ", desde, " AND ", hasta, sep = ""))
df = read.csv("../data/sensorData.links.conDiff.csv")
df$sourceTime = as.POSIXct(df$sourceTime)
df$targetTime = as.POSIXct(df$targetTime)
# head(df)
# nrow(df)
# str(df)
library(sqldf)
library(arules)
entrances = c("entrance0","entrance1","entrance2","entrance3","entrance4")
menosDeUnDia = c( 0, 60*60, 60*60*3, 60*60*6, 60*60*12, 60*60*24 )
#TODO: filtrar por tipo de auto y dia de la semana
for ( i in 2:length(menosDeUnDia) ) {
desde = menosDeUnDia[ i - 1 ]
hasta = menosDeUnDia[ i ]
for ( entrance in entrances ) {
carIDs = sqldf(paste("SELECT
carID,
MAX(targetTime) - MIN(sourceTime) as tiempo
FROM
df
WHERE
carID IN ( SELECT carID FROM df GROUP BY carID HAVING sourceTime = MIN(sourceTime) AND source = '", entrance ,"' )
GROUP BY
carID
HAVING
tiempo BETWEEN ", desde, " AND ", hasta, sep = ""))
df.filtered = df[ df$carID %in% carIDs$carID, ]
df.pares = sqldf("SELECT source, target FROM `df.filtered` GROUP BY source, target")
for ( p in 1:nrow(df.pares) ) {
tiempos = df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "diferenciaTiempo"]
colores = c()
if ( length(tiempos) > 5 ) {
tiempos = discretize( tiempos, method = "interval", categories = 3)
colores = as.numeric(tiempos)
} else {
colores = rep(1, length(tiempos))
}
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "color"] = colores
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "tiempoDiscret"] = as.character(tiempos)
}
df.filtered.aggr = sqldf("SELECT source, target, color, tiempoDiscret as label, SUM(value) as value FROM `df.filtered` GROUP BY source, target, color")
fileName = paste(entrance, "--", desde,"-",hasta, ".csv", sep = "")
write.csv(df.filtered.aggr, file = fileName, row.names = F)
}
}
df[ df$source == "entrance0" & df$target == "general-gate1", ]
nrow(df[ df$source == "entrance0" & df$target == "general-gate1", ])
for ( i in 2:length(menosDeUnDia) ) {
desde = menosDeUnDia[ i - 1 ]
hasta = menosDeUnDia[ i ]
for ( entrance in entrances ) {
carIDs = sqldf(paste("SELECT
carID,
MAX(targetTime) - MIN(sourceTime) as tiempo
FROM
df
WHERE
carID IN ( SELECT carID FROM df GROUP BY carID HAVING sourceTime = MIN(sourceTime) AND source = '", entrance ,"' )
GROUP BY
carID
HAVING
tiempo BETWEEN ", desde, " AND ", hasta, sep = ""))
df.filtered = df[ df$carID %in% carIDs$carID, ]
df.pares = sqldf("SELECT source, target FROM `df.filtered` GROUP BY source, target")
for ( p in 1:nrow(df.pares) ) {
tiempos = df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "diferenciaTiempo"] / 60
colores = c()
if ( length(tiempos) > 5 ) {
tiempos = discretize( tiempos, method = "interval", categories = 2)
colores = as.numeric(tiempos)
} else {
colores = rep(1, length(tiempos))
}
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "color"] = colores
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "tiempoDiscret"] = as.character(tiempos)
}
df.filtered.aggr = sqldf("SELECT source, target, color, tiempoDiscret as label, SUM(value) as value FROM `df.filtered` GROUP BY source, target, color")
fileName = paste(entrance, "--", desde,"-",hasta, ".csv", sep = "")
write.csv(df.filtered.aggr, file = fileName, row.names = F)
}
}
tiempos
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "diferenciaTiempo"] / 60
asd = df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "diferenciaTiempo"] / 60
scale(asd)
sd(asd)
sd( c(1,2,3) )
sd( c(1,2,10,100) )
mean( c(1,2,10,100) )
entrances = c("entrance0","entrance1","entrance2","entrance3","entrance4")
menosDeUnDia = c( 0, 60*60, 60*60*3, 60*60*6, 60*60*12, 60*60*24 )
#TODO: filtrar por tipo de auto y dia de la semana
for ( i in 2:length(menosDeUnDia) ) {
desde = menosDeUnDia[ i - 1 ]
hasta = menosDeUnDia[ i ]
for ( entrance in entrances ) {
carIDs = sqldf(paste("SELECT
carID,
MAX(targetTime) - MIN(sourceTime) as tiempo
FROM
df
WHERE
carID IN ( SELECT carID FROM df GROUP BY carID HAVING sourceTime = MIN(sourceTime) AND source = '", entrance ,"' )
GROUP BY
carID
HAVING
tiempo BETWEEN ", desde, " AND ", hasta, sep = ""))
df.filtered = df[ df$carID %in% carIDs$carID, ]
df.pares = sqldf("SELECT source, target FROM `df.filtered` GROUP BY source, target")
for ( p in 1:nrow(df.pares) ) {
tiempos = df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "diferenciaTiempo"] / 60
colores = c()
if ( length(tiempos) > 5 & sd(tiempos) > 2 ) {
tiempos = discretize( tiempos, method = "interval", categories = 2)
colores = as.numeric(tiempos)
} else {
colores = rep(1, length(tiempos))
}
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "color"] = colores
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "tiempoDiscret"] = as.character(tiempos)
}
df.filtered.aggr = sqldf("SELECT source, target, color, tiempoDiscret as label, SUM(value) as value FROM `df.filtered` GROUP BY source, target, color")
fileName = paste(entrance, "--", desde,"-",hasta, ".csv", sep = "")
write.csv(df.filtered.aggr, file = fileName, row.names = F)
}
}
paste(c("1","2","3"), "min")
for ( i in 2:length(menosDeUnDia) ) {
desde = menosDeUnDia[ i - 1 ]
hasta = menosDeUnDia[ i ]
for ( entrance in entrances ) {
carIDs = sqldf(paste("SELECT
carID,
MAX(targetTime) - MIN(sourceTime) as tiempo
FROM
df
WHERE
carID IN ( SELECT carID FROM df GROUP BY carID HAVING sourceTime = MIN(sourceTime) AND source = '", entrance ,"' )
GROUP BY
carID
HAVING
tiempo BETWEEN ", desde, " AND ", hasta, sep = ""))
df.filtered = df[ df$carID %in% carIDs$carID, ]
df.pares = sqldf("SELECT source, target FROM `df.filtered` GROUP BY source, target")
for ( p in 1:nrow(df.pares) ) {
tiempos = df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "diferenciaTiempo"] / 60
colores = c()
if ( length(tiempos) > 5 & sd(tiempos) > 2 ) {
tiempos = discretize( tiempos, method = "interval", categories = 2)
colores = as.numeric(tiempos)
} else {
colores = rep(1, length(tiempos))
}
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "color"] = colores
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "tiempoDiscret"] = paste(as.character(tiempos),"min")
}
df.filtered.aggr = sqldf("SELECT source, target, color, tiempoDiscret as label, SUM(value) as value FROM `df.filtered` GROUP BY source, target, color")
fileName = paste(entrance, "--", desde,"-",hasta, ".csv", sep = "")
write.csv(df.filtered.aggr, file = fileName, row.names = F)
}
}
tiempos
sd(scale(tiempos))
scale(tiempos)
scale(tiempos)$scale
scale(tiempos)[1]
scale(tiempos)
sd(tiempos)
tiempos
for ( i in 2:length(menosDeUnDia) ) {
desde = menosDeUnDia[ i - 1 ]
hasta = menosDeUnDia[ i ]
for ( entrance in entrances ) {
carIDs = sqldf(paste("SELECT
carID,
MAX(targetTime) - MIN(sourceTime) as tiempo
FROM
df
WHERE
carID IN ( SELECT carID FROM df GROUP BY carID HAVING sourceTime = MIN(sourceTime) AND source = '", entrance ,"' )
GROUP BY
carID
HAVING
tiempo BETWEEN ", desde, " AND ", hasta, sep = ""))
df.filtered = df[ df$carID %in% carIDs$carID, ]
df.pares = sqldf("SELECT source, target FROM `df.filtered` GROUP BY source, target")
for ( p in 1:nrow(df.pares) ) {
unidad = "mins"
tiempos = df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "diferenciaTiempo"] / 60
colores = c()
if ( max(tiempos) > 60 ) {
tiempos = tiempos / 60
unidad = "horas"
}
if ( length(tiempos) > 5 & sd(tiempos) > 2 ) {
tiempos = discretize( tiempos, method = "interval", categories = 2)
colores = as.numeric(tiempos)
} else {
colores = rep(1, length(tiempos))
}
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "color"] = colores
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "tiempoDiscret"] = paste(as.character(tiempos),unidad)
}
df.filtered.aggr = sqldf("SELECT source, target, color, tiempoDiscret as label, SUM(value) as value FROM `df.filtered` GROUP BY source, target, color")
fileName = paste(entrance, "--", desde,"-",hasta, ".csv", sep = "")
write.csv(df.filtered.aggr, file = fileName, row.names = F)
}
}
for ( i in 2:length(menosDeUnDia) ) {
desde = menosDeUnDia[ i - 1 ]
hasta = menosDeUnDia[ i ]
for ( entrance in entrances ) {
carIDs = sqldf(paste("SELECT
carID,
MAX(targetTime) - MIN(sourceTime) as tiempo
FROM
df
WHERE
carID IN ( SELECT carID FROM df GROUP BY carID HAVING sourceTime = MIN(sourceTime) AND source = '", entrance ,"' )
GROUP BY
carID
HAVING
tiempo BETWEEN ", desde, " AND ", hasta, sep = ""))
df.filtered = df[ df$carID %in% carIDs$carID, ]
df.pares = sqldf("SELECT source, target FROM `df.filtered` GROUP BY source, target")
for ( p in 1:nrow(df.pares) ) {
unidad = "mins"
tiempos = df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "diferenciaTiempo"] / 60
colores = c()
if ( max(tiempos) > 60 ) {
tiempos = tiempos / 60
unidad = "horas"
}
if ( length(tiempos) > 5 & sd(tiempos) > 2 ) {
tiempos = discretize( tiempos, method = "interval", categories = 2)
colores = as.numeric(tiempos)
} else {
colores = rep(1, length(tiempos))
}
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "color"] = colores
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "tiempoDiscret"] = paste(as.character(tiempos),unidad)
}
df.filtered.aggr = sqldf("SELECT source, target, color, tiempoDiscret as label, SUM(value) as value FROM `df.filtered` GROUP BY source, target, color")
fileName = paste(entrance, "--", desde/60/60,"-",hasta/60/60, ".csv", sep = "")
write.csv(df.filtered.aggr, file = fileName, row.names = F)
}
}
for ( i in 2:length(menosDeUnDia) ) {
desde = menosDeUnDia[ i - 1 ]
hasta = menosDeUnDia[ i ]
for ( entrance in entrances ) {
carIDs = sqldf(paste("SELECT
carID,
MAX(targetTime) - MIN(sourceTime) as tiempo
FROM
df
WHERE
carID IN ( SELECT carID FROM df GROUP BY carID HAVING sourceTime = MIN(sourceTime) AND source = '", entrance ,"' )
GROUP BY
carID
HAVING
tiempo BETWEEN ", desde, " AND ", hasta, sep = ""))
df.filtered = df[ df$carID %in% carIDs$carID, ]
df.pares = sqldf("SELECT source, target FROM `df.filtered` GROUP BY source, target")
for ( p in 1:nrow(df.pares) ) {
unidad = "mins"
tiempos = df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "diferenciaTiempo"] / 60
colores = c()
if ( max(tiempos) > 60 ) {
tiempos = tiempos / 60
unidad = "horas"
}
if ( length(tiempos) > 5 & sd(tiempos) > 2 ) {
tiempos = discretize( tiempos, method = "interval", categories = 2)
colores = as.numeric(tiempos)
} else {
colores = rep(1, length(tiempos))
}
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "color"] = colores
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "tiempoDiscret"] = paste(as.character(tiempos),unidad)
}
df.filtered.aggr = sqldf("SELECT source, target, color, tiempoDiscret as label, SUM(value) as value FROM `df.filtered` GROUP BY source, target, color")
fileName = paste(entrance, "--", desde/60/60,"h-",hasta/60/60, "h.csv", sep = "")
write.csv(df.filtered.aggr, file = fileName, row.names = F)
}
}
?discretize
df.filtered
for ( i in 2:length(menosDeUnDia) ) {
desde = menosDeUnDia[ i - 1 ]
hasta = menosDeUnDia[ i ]
for ( entrance in entrances ) {
carIDs = sqldf(paste("SELECT
carID,
MAX(targetTime) - MIN(sourceTime) as tiempo
FROM
df
WHERE
carID IN ( SELECT carID FROM df GROUP BY carID HAVING sourceTime = MIN(sourceTime) AND source = '", entrance ,"' )
GROUP BY
carID
HAVING
tiempo BETWEEN ", desde, " AND ", hasta, sep = ""))
df.filtered = df[ df$carID %in% carIDs$carID, ]
df.pares = sqldf("SELECT source, target FROM `df.filtered` GROUP BY source, target")
for ( p in 1:nrow(df.pares) ) {
unidad = "mins"
tiempos = df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "diferenciaTiempo"] / 60
colores = c()
tiempoDiscret = ""
if ( max(tiempos) > 60 ) {
tiempos = tiempos / 60
unidad = "horas"
}
if ( length(tiempos) > 5 & sd(tiempos) > 2 ) {
tiempos = discretize( tiempos, method = "interval", categories = 2)
colores = as.numeric(tiempos)
tiempoDiscret = paste(as.character(tiempos),unidad)
} else {
colores = rep(1, length(tiempos))
tiempoDiscret = paste(as.character(mean(tiempos)), unidad)
}
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "color"] = colores
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "tiempoDiscret"] = tiempoDiscret
}
df.filtered.aggr = sqldf("SELECT source, target, color, tiempoDiscret as label, SUM(value) as value FROM `df.filtered` GROUP BY source, target, color")
fileName = paste(entrance, "--", desde/60/60,"h-",hasta/60/60, "h.csv", sep = "")
write.csv(df.filtered.aggr, file = fileName, row.names = F)
}
}
?as.character
format(1.111112)
format(1.111112, digits = 2)
format(1.111112, digits = 3)
format(1.111112, nsmall = 3)
format(1.111112, nsmall = 1)
format(1.111112, digits = 1)
format(1.111112, digits = 2)
format(100.111112, digits = 2)
format(10023.111112, digits = 2)
for ( i in 2:length(menosDeUnDia) ) {
desde = menosDeUnDia[ i - 1 ]
hasta = menosDeUnDia[ i ]
for ( entrance in entrances ) {
carIDs = sqldf(paste("SELECT
carID,
MAX(targetTime) - MIN(sourceTime) as tiempo
FROM
df
WHERE
carID IN ( SELECT carID FROM df GROUP BY carID HAVING sourceTime = MIN(sourceTime) AND source = '", entrance ,"' )
GROUP BY
carID
HAVING
tiempo BETWEEN ", desde, " AND ", hasta, sep = ""))
df.filtered = df[ df$carID %in% carIDs$carID, ]
df.pares = sqldf("SELECT source, target FROM `df.filtered` GROUP BY source, target")
for ( p in 1:nrow(df.pares) ) {
unidad = "mins"
tiempos = df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "diferenciaTiempo"] / 60
colores = c()
tiempoDiscret = ""
if ( max(tiempos) > 60 ) {
tiempos = tiempos / 60
unidad = "horas"
}
if ( length(tiempos) > 5 & sd(tiempos) > 2 ) {
tiempos = discretize( tiempos, method = "interval", categories = 2)
colores = as.numeric(tiempos)
tiempoDiscret = paste(as.character(tiempos),unidad)
} else {
colores = rep(1, length(tiempos))
tiempoDiscret = paste(format(mean(tiempos), digits = 4), unidad)
}
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "color"] = colores
df.filtered[ df.filtered$source == df.pares[p, "source"] & df.filtered$target == df.pares[p, "target"], "tiempoDiscret"] = tiempoDiscret
}
df.filtered.aggr = sqldf("SELECT source, target, color, tiempoDiscret as label, SUM(value) as value FROM `df.filtered` GROUP BY source, target, color")
fileName = paste(entrance, "--", desde/60/60,"h-",hasta/60/60, "h.csv", sep = "")
write.csv(df.filtered.aggr, file = fileName, row.names = F)
}
}
